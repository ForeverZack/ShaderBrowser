// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MYFLATSTRUCT_TEXTURE_H_
#define FLATBUFFERS_GENERATED_MYFLATSTRUCT_TEXTURE_H_

#include "flatbuffers/flatbuffers.h"

namespace Texture {

struct Texture_Fb;

struct Texture_Fb FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_WIDTH = 8,
    VT_HEIGHT = 10
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float width() const {
    return GetField<float>(VT_WIDTH, 0.0f);
  }
  float height() const {
    return GetField<float>(VT_HEIGHT, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_WIDTH) &&
           VerifyField<float>(verifier, VT_HEIGHT) &&
           verifier.EndTable();
  }
};

struct Texture_FbBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Texture_Fb::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Texture_Fb::VT_Y, y, 0.0f);
  }
  void add_width(float width) {
    fbb_.AddElement<float>(Texture_Fb::VT_WIDTH, width, 0.0f);
  }
  void add_height(float height) {
    fbb_.AddElement<float>(Texture_Fb::VT_HEIGHT, height, 0.0f);
  }
  explicit Texture_FbBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Texture_FbBuilder &operator=(const Texture_FbBuilder &);
  flatbuffers::Offset<Texture_Fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Texture_Fb>(end);
    return o;
  }
};

inline flatbuffers::Offset<Texture_Fb> CreateTexture_Fb(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float width = 0.0f,
    float height = 0.0f) {
  Texture_FbBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const Texture::Texture_Fb *GetTexture_Fb(const void *buf) {
  return flatbuffers::GetRoot<Texture::Texture_Fb>(buf);
}

inline const Texture::Texture_Fb *GetSizePrefixedTexture_Fb(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Texture::Texture_Fb>(buf);
}

inline bool VerifyTexture_FbBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Texture::Texture_Fb>(nullptr);
}

inline bool VerifySizePrefixedTexture_FbBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Texture::Texture_Fb>(nullptr);
}

inline void FinishTexture_FbBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Texture::Texture_Fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTexture_FbBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Texture::Texture_Fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Texture

#endif  // FLATBUFFERS_GENERATED_MYFLATSTRUCT_TEXTURE_H_
