// int boneId = gl_LocalInvocationID.x + 1;	
// layout (local_size_x=bone_count, local_size_y=1, local_size_z=1) in;

// 输出结果
/*
骨骼变换的结果将存在同一个buffer里，他们紧密排列在一起：
					 -------------------------------------------------------------------------------
	idx				|	0	|	1	|	2	|	3	|	4	|	5	|	6	|	7	|	8	|	...
	boneId			|	0	|	0	|	0	|	1	|	1	|	1	|	2	|	2	|	2	|	...
	result_buffers	|	pos	|	rot	|	sca	|	pos	|	rot	|	sca	|	pos	|	rot	|	sca	|	...
					 -------------------------------------------------------------------------------
*/
layout (rgba32f) uniform imageBuffer result_buffers;

// 预定义参数
const int MAX_BONES = 100;
// identity matrix
const mat4 mat4_identity = mat4(1, 0, 0, 0,
                                0, 1, 0, 0,
                                0, 0, 1, 0,
                                0, 0, 0, 1);

								
// 模型通用：只需要设置一次
// 骨骼数量
uniform int bone_count;
// 骨骼变换关键帧信息 （注意！！这里的信息，不是按骨骼id来排序！！！！！！！！！！！！！！！！！！！！！！！）前bone_count内存储了骨骼节点的原始变换信息
uniform samplerBuffer position_keys; //0~2:position 3:time  GL_RGBA32F
uniform samplerBuffer rotation_keys; // quaternion  GL_RGBA32F
uniform samplerBuffer rotation_times; // 关键帧时间 长度和rotation_keys相同  GL_R32F
uniform samplerBuffer scale_keys; //0~2:scale 3:time    GL_RGBA32F

// 同一个动画共用数据(切换动画需要重新设置)：
/*
samplerBuffer结构是像下面这样(假设是position_keys):
             - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    boneId  |   5  |   5  |   2   |   3   |   3   |   3   |   1  |   ...
    keyFrame|   0   |    1  |   0   |   0   |   1   |   2   |   0   |   ...
            - - - - - - -- - - - - - - - - - - - -- - - - - - - - - - -- - -
contains_bones结构如下:
    {-1, 3, 1, 2, -1, 0, ...}
trans_bone_keyframe_count结构如下:
    {(2,..), (1,..), (3,..), (1,..)}
 */
// 上面的骨骼变换信息包含哪些骨骼 (id：boneId ; value: -1.不包含，即该骨骼节点没有发生变换 1~MAX_BONES.在所有发生变换的骨骼信息里排第几个(用来定位采样关键帧))
uniform int contains_bones[MAX_BONES];  // 例如：[-1, 0, -1, -1, 1] 表示该动画只有boneId为1，4的骨骼发生了变换，采样位置为0，1。
// 每个发生变换的骨骼有多少关键帧 (用上面contains_bones的value定位，0.position关键帧数量 1.rotation关键帧数量 2.scale关键帧数量)
uniform ivec3 trans_bone_keyframe_count[MAX_BONES];
// 关键帧偏移信息 (0:position, 1:rotation, 2:scale)
uniform ivec3 keys_offset;

// 每帧需要重新设置
// 动画数据(0:第几帧(小数), )
uniform vec4 animation_info;
// 是否进行线性插值(0:不使用插值，直接用前一帧的数据 1:插值)
uniform int interpolate = 1;



// 函数声明(跟c一样，glsl的函数声明需要放在最前面，才不会因为定义的先后顺序影响使用)
int convertSamplerStartUV(int trans_type);
void samplerKeyPairs_pos(float time, out vec4 leftFrame, out vec4 rightFrame);
void samplerKeyPairs_rot(float time, out vec4 leftFrame, out vec4 rightFrame, out float leftTime, out float rightTime);
void samplerKeyPairs_scal(float time, out vec4 leftFrame, out vec4 rightFrame);
void computeBoneMatrix(out vec4 position_out, out vec4 rotation_out, out vec4 scale_out);
void getLocalBoneMatrix(out vec4 position_out, out vec4 rotation_out, out vec4 scale_out);
// 变量声明
int boneId = 0;

void main() 
{
	boneId = int(gl_LocalInvocationID.x);
	
	// 计算骨骼矩阵
	vec4 result_position, result_rotation, result_scale;
    getLocalBoneMatrix(result_position, result_rotation, result_scale);

	// 将结果存入buffer
	int storeIdx = boneId * 3;
	imageStore(result_buffers, storeIdx, result_position);
	imageStore(result_buffers, storeIdx+1, result_rotation);
	imageStore(result_buffers, storeIdx+2, result_scale);
}

// 插值
vec4 lerp(vec4 a, vec4 b, float percent)
{
    return a + (b-a)*percent;
}

// 计算采样起始位置  trans_type: 0.position 1.rotation 2.scale
int convertSamplerStartUV(int trans_type)
{
    int uv = keys_offset[trans_type];
    int index = 0;
    int bufferIndex = contains_bones[boneId];
    // 计算当前骨骼id之前的骨骼变换数据量的大小
    for (int i=0; i<bone_count; ++i)
    {
        index = contains_bones[i];
        if (index!=-1 && index<bufferIndex)
        {
            uv = uv + trans_bone_keyframe_count[index][trans_type];
        }
    }
    return uv;
}

// 采样数据
void samplerKeyPairs_pos(float time, out vec4 leftFrame, out vec4 rightFrame)
{
    int startUV = convertSamplerStartUV(0);
    int index = contains_bones[boneId];
    int count = trans_bone_keyframe_count[index][0];
    
    // 只有一个关键帧
    if (count == 1)
    {
        leftFrame = rightFrame = texelFetch(position_keys, startUV);
        return;
    }
    
    // 时间超过最后一个关键帧时间，则停止在最后一个关键帧
    vec4 keyValue = texelFetch(position_keys, startUV+count-1);
    if (keyValue[3] < time)
    {
        leftFrame = rightFrame = keyValue;
        return;
    }
    
    // 检测关键帧位置
    for (int i=0; i<count; ++i)
    {
        keyValue = texelFetch(position_keys, startUV+i);
        if(keyValue[3] >= time)
        {
            leftFrame = texelFetch(position_keys, startUV+i-1);
            rightFrame = keyValue;
            break;
        }
    }
}
void samplerKeyPairs_rot(float time, out vec4 leftFrame, out vec4 rightFrame, out float leftTime, out float rightTime)
{
    int startUV = convertSamplerStartUV(0);
    int index = contains_bones[boneId];
    int count = trans_bone_keyframe_count[index][1];
    
    // 只有一个关键帧
    if (count == 1)
    {
        leftFrame = rightFrame = texelFetch(rotation_keys, startUV);
        leftTime = rightTime = texelFetch(rotation_times, startUV)[0];
        return;
    }
    
    // 时间超过最后一个关键帧时间，则停止在最后一个关键帧
    vec4 keyValue = texelFetch(rotation_keys, startUV+count-1);
    float keyTime = texelFetch(rotation_times, startUV+count-1)[0];
    if (keyTime < time)
    {
        leftFrame = rightFrame = keyValue;
        leftTime = rightTime = texelFetch(rotation_times, startUV+count-1)[0];
        return;
    }
    
    // 检测关键帧位置
    for (int i=0; i<count; ++i)
    {
        keyValue = texelFetch(rotation_keys, startUV+i);
        keyTime = texelFetch(rotation_times, startUV+i)[0];
        if(keyTime >= time)
        {
            leftFrame = texelFetch(rotation_keys, startUV+i-1);
            leftTime = texelFetch(rotation_times, startUV+i-1)[0];
            rightFrame = keyValue;
            rightTime = texelFetch(rotation_times ,startUV+i)[0];
            break;
        }
    }
}
void samplerKeyPairs_scal(float time, out vec4 leftFrame, out vec4 rightFrame)
{
    int startUV = convertSamplerStartUV(2);
    int index = contains_bones[boneId];
    int count = trans_bone_keyframe_count[index][2];
    
    // 只有一个关键帧
    if (count == 1)
    {
        leftFrame = rightFrame = texelFetch(scale_keys, startUV);
        return;
    }
    
    // 时间超过最后一个关键帧时间，则停止在最后一个关键帧
    vec4 keyValue = texelFetch(scale_keys, startUV+count-1);
    if (keyValue[3] < time)
    {
        leftFrame = rightFrame = keyValue;
        return;
    }
    
    // 检测关键帧位置
    for (int i=0; i<count; ++i)
    {
        keyValue = texelFetch(scale_keys, startUV+i);
        if(keyValue[3] >= time)
        {
            leftFrame = texelFetch(scale_keys, startUV+i-1);
            rightFrame = keyValue;
            break;
        }
    }
}

// 计算骨骼矩阵(这个方法默认boneId的骨骼发生了变换)
void computeBoneMatrix(out vec4 position_out, out vec4 rotation_out, out vec4 scale_out)
{
    float time = animation_info[0];
    
    vec4 leftFrame[3];
    vec4 rightFrame[3];
    float leftTime, rightTime;
    
    // position
    samplerKeyPairs_pos(time, leftFrame[0], rightFrame[0]);
    // rotation
    samplerKeyPairs_rot(time, leftFrame[1], rightFrame[1], leftTime, rightTime);
    // scale
    samplerKeyPairs_scal(time, leftFrame[2], rightFrame[2]);
    
    
    vec4 position, rotation, scale;
    float percent;
    // position
    if (leftFrame[0]==rightFrame[0] || interpolate!=1)
    {
        position = leftFrame[0];
    }
    else
    {
        percent = (time-leftFrame[0][3]) / (rightFrame[0][3] - leftFrame[0][3]);
        position = lerp(leftFrame[0], rightFrame[0], percent);
    }
    // rotation
    if (leftFrame[1]==rightFrame[1] || interpolate!=1)
    {
        rotation = leftFrame[1];
    }
    else
    {
        percent = (time-leftTime) / (rightTime - leftTime);
        rotation = lerp(leftFrame[1], rightFrame[1], percent);
    }
    // scale
    if (leftFrame[2]==rightFrame[2] || interpolate!=1)
    {
        scale = leftFrame[2];
    }
    else
    {
        percent = (time-leftFrame[2][3]) / (rightFrame[2][3] - leftFrame[2][3]);
        scale = lerp(leftFrame[2], rightFrame[2], percent);
    }
   
    position_out = position;
    rotation_out = rotation;
    scale_out = scale;
}

// 根据骨骼id得到骨骼自身的变换矩阵
void getLocalBoneMatrix(out vec4 position_out, out vec4 rotation_out, out vec4 scale_out)
{
    if (contains_bones[boneId] != -1)
    {
        computeBoneMatrix(position_out, rotation_out, scale_out);
//
//        int startUV = convertSamplerStartUV(0);
//        int index = contains_bones[boneId];
//        int count = trans_bone_keyframe_count[index][0];
//        scale_out = vec4(startUV, animation_info[0], count, 0);
		// scale_out = vec4(boneId, 0, 0, 0);
    }
    else
    {
        // 应该传入node->mTransformation(应该是bindpose，骨骼的原始变换信息)
        position_out = texelFetch(position_keys, boneId);
        rotation_out = texelFetch(rotation_keys, boneId);
        scale_out = texelFetch(scale_keys, boneId);
        scale_out.w = -1111;
    }
}
